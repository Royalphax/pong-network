// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientpacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clientpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clientpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clientpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clientpacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clientpacket_2eproto;
class ClientPacket;
struct ClientPacketDefaultTypeInternal;
extern ClientPacketDefaultTypeInternal _ClientPacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientPacket* Arena::CreateMaybeMessage<::ClientPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientPacket_PaddleDirection : int {
  ClientPacket_PaddleDirection_NONE = 0,
  ClientPacket_PaddleDirection_PADDLE_DOWN = 1,
  ClientPacket_PaddleDirection_PADDLE_UP = 2
};
bool ClientPacket_PaddleDirection_IsValid(int value);
constexpr ClientPacket_PaddleDirection ClientPacket_PaddleDirection_PaddleDirection_MIN = ClientPacket_PaddleDirection_NONE;
constexpr ClientPacket_PaddleDirection ClientPacket_PaddleDirection_PaddleDirection_MAX = ClientPacket_PaddleDirection_PADDLE_UP;
constexpr int ClientPacket_PaddleDirection_PaddleDirection_ARRAYSIZE = ClientPacket_PaddleDirection_PaddleDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPacket_PaddleDirection_descriptor();
template<typename T>
inline const std::string& ClientPacket_PaddleDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientPacket_PaddleDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientPacket_PaddleDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientPacket_PaddleDirection_descriptor(), enum_t_value);
}
inline bool ClientPacket_PaddleDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientPacket_PaddleDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientPacket_PaddleDirection>(
    ClientPacket_PaddleDirection_descriptor(), name, value);
}
// ===================================================================

class ClientPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientPacket) */ {
 public:
  inline ClientPacket() : ClientPacket(nullptr) {}
  ~ClientPacket() override;
  explicit PROTOBUF_CONSTEXPR ClientPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPacket(const ClientPacket& from);
  ClientPacket(ClientPacket&& from) noexcept
    : ClientPacket() {
    *this = ::std::move(from);
  }

  inline ClientPacket& operator=(const ClientPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPacket& operator=(ClientPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPacket* internal_default_instance() {
    return reinterpret_cast<const ClientPacket*>(
               &_ClientPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientPacket& a, ClientPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientPacket& from) {
    ClientPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientPacket";
  }
  protected:
  explicit ClientPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientPacket_PaddleDirection PaddleDirection;
  static constexpr PaddleDirection NONE =
    ClientPacket_PaddleDirection_NONE;
  static constexpr PaddleDirection PADDLE_DOWN =
    ClientPacket_PaddleDirection_PADDLE_DOWN;
  static constexpr PaddleDirection PADDLE_UP =
    ClientPacket_PaddleDirection_PADDLE_UP;
  static inline bool PaddleDirection_IsValid(int value) {
    return ClientPacket_PaddleDirection_IsValid(value);
  }
  static constexpr PaddleDirection PaddleDirection_MIN =
    ClientPacket_PaddleDirection_PaddleDirection_MIN;
  static constexpr PaddleDirection PaddleDirection_MAX =
    ClientPacket_PaddleDirection_PaddleDirection_MAX;
  static constexpr int PaddleDirection_ARRAYSIZE =
    ClientPacket_PaddleDirection_PaddleDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PaddleDirection_descriptor() {
    return ClientPacket_PaddleDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& PaddleDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PaddleDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PaddleDirection_Name.");
    return ClientPacket_PaddleDirection_Name(enum_t_value);
  }
  static inline bool PaddleDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PaddleDirection* value) {
    return ClientPacket_PaddleDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPaddleDirFieldNumber = 3,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .ClientPacket.PaddleDirection paddleDir = 3 [default = NONE];
  bool has_paddledir() const;
  private:
  bool _internal_has_paddledir() const;
  public:
  void clear_paddledir();
  ::ClientPacket_PaddleDirection paddledir() const;
  void set_paddledir(::ClientPacket_PaddleDirection value);
  private:
  ::ClientPacket_PaddleDirection _internal_paddledir() const;
  void _internal_set_paddledir(::ClientPacket_PaddleDirection value);
  public:

  // @@protoc_insertion_point(class_scope:ClientPacket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    int paddledir_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clientpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientPacket

// required int32 id = 1;
inline bool ClientPacket::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientPacket::has_id() const {
  return _internal_has_id();
}
inline void ClientPacket::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ClientPacket::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ClientPacket::id() const {
  // @@protoc_insertion_point(field_get:ClientPacket.id)
  return _internal_id();
}
inline void ClientPacket::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void ClientPacket::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ClientPacket.id)
}

// required string name = 2;
inline bool ClientPacket::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientPacket::has_name() const {
  return _internal_has_name();
}
inline void ClientPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientPacket::name() const {
  // @@protoc_insertion_point(field_get:ClientPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPacket::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientPacket.name)
}
inline std::string* ClientPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ClientPacket.name)
  return _s;
}
inline const std::string& ClientPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClientPacket::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientPacket::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientPacket::release_name() {
  // @@protoc_insertion_point(field_release:ClientPacket.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.name)
}

// optional .ClientPacket.PaddleDirection paddleDir = 3 [default = NONE];
inline bool ClientPacket::_internal_has_paddledir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientPacket::has_paddledir() const {
  return _internal_has_paddledir();
}
inline void ClientPacket::clear_paddledir() {
  _impl_.paddledir_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ClientPacket_PaddleDirection ClientPacket::_internal_paddledir() const {
  return static_cast< ::ClientPacket_PaddleDirection >(_impl_.paddledir_);
}
inline ::ClientPacket_PaddleDirection ClientPacket::paddledir() const {
  // @@protoc_insertion_point(field_get:ClientPacket.paddleDir)
  return _internal_paddledir();
}
inline void ClientPacket::_internal_set_paddledir(::ClientPacket_PaddleDirection value) {
  assert(::ClientPacket_PaddleDirection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.paddledir_ = value;
}
inline void ClientPacket::set_paddledir(::ClientPacket_PaddleDirection value) {
  _internal_set_paddledir(value);
  // @@protoc_insertion_point(field_set:ClientPacket.paddleDir)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientPacket_PaddleDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientPacket_PaddleDirection>() {
  return ::ClientPacket_PaddleDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clientpacket_2eproto
