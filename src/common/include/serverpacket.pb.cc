// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverpacket.proto

#include "serverpacket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ServerPacket::ServerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ballx_)*/0
  , /*decltype(_impl_.bally_)*/0
  , /*decltype(_impl_.paddlex_)*/0
  , /*decltype(_impl_.paddley_)*/0
  , /*decltype(_impl_.clientscore_)*/0
  , /*decltype(_impl_.enemyscore_)*/0
  , /*decltype(_impl_.gamestate_)*/0} {}
struct ServerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPacketDefaultTypeInternal() {}
  union {
    ServerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPacketDefaultTypeInternal _ServerPacket_default_instance_;
static ::_pb::Metadata file_level_metadata_serverpacket_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_serverpacket_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_serverpacket_2eproto = nullptr;

const uint32_t TableStruct_serverpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_.ballx_),
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_.bally_),
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_.paddlex_),
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_.paddley_),
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_.clientscore_),
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_.enemyscore_),
  PROTOBUF_FIELD_OFFSET(::ServerPacket, _impl_.gamestate_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::ServerPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ServerPacket_default_instance_._instance,
};

const char descriptor_table_protodef_serverpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022serverpacket.proto\"\374\001\n\014ServerPacket\022\r\n"
  "\005ballX\030\001 \002(\005\022\r\n\005ballY\030\002 \002(\005\022\017\n\007paddleX\030\003"
  " \002(\005\022\017\n\007paddleY\030\004 \002(\005\022\023\n\013clientScore\030\005 \002"
  "(\005\022\022\n\nenemyScore\030\006 \002(\005\022*\n\tgameState\030\007 \002("
  "\0162\027.ServerPacket.GameState\"W\n\tGameState\022"
  "\r\n\tGAME_MENU\020\000\022\016\n\nGAME_START\020\001\022\r\n\tGAME_P"
  "LAY\020\002\022\r\n\tGAME_OVER\020\003\022\r\n\tGAME_QUIT\020\004"
  ;
static ::_pbi::once_flag descriptor_table_serverpacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_serverpacket_2eproto = {
    false, false, 275, descriptor_table_protodef_serverpacket_2eproto,
    "serverpacket.proto",
    &descriptor_table_serverpacket_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_serverpacket_2eproto::offsets,
    file_level_metadata_serverpacket_2eproto, file_level_enum_descriptors_serverpacket_2eproto,
    file_level_service_descriptors_serverpacket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_serverpacket_2eproto_getter() {
  return &descriptor_table_serverpacket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_serverpacket_2eproto(&descriptor_table_serverpacket_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerPacket_GameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serverpacket_2eproto);
  return file_level_enum_descriptors_serverpacket_2eproto[0];
}
bool ServerPacket_GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerPacket_GameState ServerPacket::GAME_MENU;
constexpr ServerPacket_GameState ServerPacket::GAME_START;
constexpr ServerPacket_GameState ServerPacket::GAME_PLAY;
constexpr ServerPacket_GameState ServerPacket::GAME_OVER;
constexpr ServerPacket_GameState ServerPacket::GAME_QUIT;
constexpr ServerPacket_GameState ServerPacket::GameState_MIN;
constexpr ServerPacket_GameState ServerPacket::GameState_MAX;
constexpr int ServerPacket::GameState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ServerPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerPacket>()._impl_._has_bits_);
  static void set_has_ballx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bally(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_paddlex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_paddley(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clientscore(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enemyscore(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

ServerPacket::ServerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerPacket)
}
ServerPacket::ServerPacket(const ServerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ballx_){}
    , decltype(_impl_.bally_){}
    , decltype(_impl_.paddlex_){}
    , decltype(_impl_.paddley_){}
    , decltype(_impl_.clientscore_){}
    , decltype(_impl_.enemyscore_){}
    , decltype(_impl_.gamestate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ballx_, &from._impl_.ballx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gamestate_) -
    reinterpret_cast<char*>(&_impl_.ballx_)) + sizeof(_impl_.gamestate_));
  // @@protoc_insertion_point(copy_constructor:ServerPacket)
}

inline void ServerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ballx_){0}
    , decltype(_impl_.bally_){0}
    , decltype(_impl_.paddlex_){0}
    , decltype(_impl_.paddley_){0}
    , decltype(_impl_.clientscore_){0}
    , decltype(_impl_.enemyscore_){0}
    , decltype(_impl_.gamestate_){0}
  };
}

ServerPacket::~ServerPacket() {
  // @@protoc_insertion_point(destructor:ServerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.ballx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gamestate_) -
        reinterpret_cast<char*>(&_impl_.ballx_)) + sizeof(_impl_.gamestate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 ballX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ballx(&has_bits);
          _impl_.ballx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ballY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bally(&has_bits);
          _impl_.bally_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 paddleX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_paddlex(&has_bits);
          _impl_.paddlex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 paddleY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_paddley(&has_bits);
          _impl_.paddley_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 clientScore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_clientscore(&has_bits);
          _impl_.clientscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 enemyScore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enemyscore(&has_bits);
          _impl_.enemyscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ServerPacket.GameState gameState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ServerPacket_GameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::ServerPacket_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 ballX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ballx(), target);
  }

  // required int32 ballY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bally(), target);
  }

  // required int32 paddleX = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_paddlex(), target);
  }

  // required int32 paddleY = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_paddley(), target);
  }

  // required int32 clientScore = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_clientscore(), target);
  }

  // required int32 enemyScore = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_enemyscore(), target);
  }

  // required .ServerPacket.GameState gameState = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_gamestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPacket)
  return target;
}

size_t ServerPacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ServerPacket)
  size_t total_size = 0;

  if (_internal_has_ballx()) {
    // required int32 ballX = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ballx());
  }

  if (_internal_has_bally()) {
    // required int32 ballY = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bally());
  }

  if (_internal_has_paddlex()) {
    // required int32 paddleX = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddlex());
  }

  if (_internal_has_paddley()) {
    // required int32 paddleY = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddley());
  }

  if (_internal_has_clientscore()) {
    // required int32 clientScore = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientscore());
  }

  if (_internal_has_enemyscore()) {
    // required int32 enemyScore = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemyscore());
  }

  if (_internal_has_gamestate()) {
    // required .ServerPacket.GameState gameState = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  return total_size;
}
size_t ServerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPacket)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 ballX = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ballx());

    // required int32 ballY = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bally());

    // required int32 paddleX = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddlex());

    // required int32 paddleY = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddley());

    // required int32 clientScore = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientscore());

    // required int32 enemyScore = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemyscore());

    // required .ServerPacket.GameState gameState = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPacket::GetClassData() const { return &_class_data_; }


void ServerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPacket*>(&to_msg);
  auto& from = static_cast<const ServerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ballx_ = from._impl_.ballx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bally_ = from._impl_.bally_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.paddlex_ = from._impl_.paddlex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.paddley_ = from._impl_.paddley_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.clientscore_ = from._impl_.clientscore_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.enemyscore_ = from._impl_.enemyscore_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.gamestate_ = from._impl_.gamestate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPacket::CopyFrom(const ServerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ServerPacket::InternalSwap(ServerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerPacket, _impl_.gamestate_)
      + sizeof(ServerPacket::_impl_.gamestate_)
      - PROTOBUF_FIELD_OFFSET(ServerPacket, _impl_.ballx_)>(
          reinterpret_cast<char*>(&_impl_.ballx_),
          reinterpret_cast<char*>(&other->_impl_.ballx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverpacket_2eproto_getter, &descriptor_table_serverpacket_2eproto_once,
      file_level_metadata_serverpacket_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerPacket*
Arena::CreateMaybeMessage< ::ServerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
